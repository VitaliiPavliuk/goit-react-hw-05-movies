{"version":3,"file":"static/js/493.d7775740.chunk.js","mappings":"2OA6DA,UAvDA,WACE,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAEA,IAAMG,EAAa,mCAAG,WAAMH,GAAN,uFAElBH,GAAa,GAFK,UAIYO,EAAAA,EAAAA,IAAgBJ,GAJ5B,OAIZK,EAJY,OAMlBV,EAAQU,GANU,gDAQlBN,EAAS,KAAMO,SARG,yBAUlBT,GAAa,GAVK,4EAAH,sDAanBM,EAAcH,EAfM,CAgBrB,GAAE,CAACA,KAGF,2BACGJ,IAAa,SAAC,IAAD,IACH,OAAVE,IAAkB,wDAAgCA,MAEnD,wBACmB,IAAhBJ,EAAKa,QACJb,EAAKc,KAAI,SAAAC,GACP,OACE,2BACE,gBACEC,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxCC,EAENC,IAAKJ,EAAMK,QAGb,uBAAIL,EAAMK,QACV,uCAAeL,EAAMM,eAXdN,EAAMO,MAclB,QAIV,C,+LCzDKC,EAAW,gCACXC,EAAU,mCAEHC,EAAqB,mCAAG,+FAC7BC,EAAe,CACnBC,OAAQ,CACNC,QAASJ,IAHsB,SAOZK,EAAAA,EAAAA,IAAA,UAClBN,EADkB,uBAErBG,GATiC,uBAO3BI,EAP2B,EAO3BA,KAP2B,kBAY5BA,EAAKC,SAZuB,2CAAH,qDAerBC,EAAa,mCAAG,WAAMC,GAAN,kFACrBP,EAAe,CACnBC,OAAQ,CACNC,QAASJ,EACTS,MAAOA,IAJgB,SAQJJ,EAAAA,EAAAA,IAAA,UAAaN,EAAb,iBAAsCG,GARlC,uBAQnBI,EARmB,EAQnBA,KARmB,kBAUpBA,EAAKC,SAVe,2CAAH,sDAabG,EAAgB,mCAAG,WAAM5B,GAAN,kFACxBoB,EAAe,CACnBC,OAAQ,CACNC,QAASJ,IAHiB,SAOPK,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAjB,GACrBoB,GAT4B,uBAOtBI,EAPsB,EAOtBA,KAPsB,kBAYvBA,GAZuB,2CAAH,sDAehBpB,EAAe,mCAAG,WAAMJ,GAAN,kFACvBoB,EAAe,CACnBC,OAAQ,CACNC,QAASJ,IAHgB,SAONK,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAjB,EADA,YAErBoB,GAT2B,uBAOrBI,EAPqB,EAOrBA,KAPqB,kBAYtBA,EAAK9B,MAZiB,2CAAH,sDAefmC,EAAkB,mCAAG,WAAM7B,GAAN,kFAC1BoB,EAAe,CACnBC,OAAQ,CACNC,QAASJ,IAHmB,SAOTK,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAjB,EADA,YAErBoB,GAT8B,uBAOxBI,EAPwB,EAOxBA,KAPwB,kBAYzBA,EAAKC,SAZoB,2CAAH,qD","sources":["pages/Cast.jsx","services/api.js"],"sourcesContent":["import { Loader } from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { requestCastById } from 'services/api';\nimport avatar from '../img/avatar.webp';\n\nfunction Cast() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchCastById = async movieId => {\n      try {\n        setIsLoading(true);\n\n        const fetchedCastById = await requestCastById(movieId);\n\n        setCast(fetchedCastById);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCastById(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error !== null && <p>Oops, some error occured... {error}</p>}\n\n      <ul>\n        {cast.length !== 0 &&\n          cast.map(actor => {\n            return (\n              <li key={actor.order}>\n                <img\n                  src={\n                    actor.profile_path\n                      ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                      : avatar\n                  }\n                  alt={actor.name}\n                />\n\n                <p>{actor.name}</p>\n                <p>Character: {actor.character}</p>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '442842e0e9a8a18a8e446b3595831199';\n\nexport const requestTrendingMovies = async () => {\n  const searchParams = {\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day`,\n    searchParams\n  );\n\n  return data.results;\n};\n\nexport const requestMovies = async query => {\n  const searchParams = {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  };\n\n  const { data } = await axios.get(`${BASE_URL}/search/movie`, searchParams);\n\n  return data.results;\n};\n\nexport const requestMovieById = async movieId => {\n  const searchParams = {\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}`,\n    searchParams\n  );\n\n  return data;\n};\n\nexport const requestCastById = async movieId => {\n  const searchParams = {\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits`,\n    searchParams\n  );\n\n  return data.cast;\n};\n\nexport const requestReviewsById = async movieId => {\n  const searchParams = {\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews`,\n    searchParams\n  );\n\n  return data.results;\n};\n"],"names":["useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchCastById","requestCastById","fetchedCastById","message","length","map","actor","src","profile_path","avatar","alt","name","character","order","BASE_URL","API_KEY","requestTrendingMovies","searchParams","params","api_key","axios","data","results","requestMovies","query","requestMovieById","requestReviewsById"],"sourceRoot":""}